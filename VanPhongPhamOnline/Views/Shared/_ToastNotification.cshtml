<!-- Toast Notification Container -->
<div id="toastContainer" style="position: fixed; top: 20px; right: 20px; z-index: 9999; width: 350px;">
</div>

<style>
    .toast-notification {
        padding: 15px 20px;
        margin-bottom: 10px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        font-weight: 500;
        display: flex;
        align-items: center;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .toast-notification.show {
            opacity: 1;
            transform: translateX(0);
        }

        .toast-notification.success {
            background: linear-gradient(135deg, #4caf50, #45a049);
            color: white;
            border-left: 4px solid #2e7d32;
        }

        .toast-notification.error {
            background: linear-gradient(135deg, #f44336, #d32f2f);
            color: white;
            border-left: 4px solid #c62828;
        }

        .toast-notification.info {
            background: linear-gradient(135deg, #2196f3, #1976d2);
            color: white;
            border-left: 4px solid #1565c0;
        }

    .toast-icon {
        font-size: 18px;
        margin-right: 12px;
        flex-shrink: 0;
    }

    .toast-message {
        flex: 1;
        font-size: 14px;
        line-height: 1.4;
    }

    .toast-close {
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        padding: 0;
        margin-left: 10px;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0.7;
        transition: opacity 0.2s ease;
    }

        .toast-close:hover {
            opacity: 1;
        }

    .toast-progress {
        position: absolute;
        bottom: 0;
        left: 0;
        height: 3px;
        background: rgba(255, 255, 255, 0.3);
        width: 100%;
        transform-origin: left;
        animation: progressBar 5s linear forwards;
    }

    @@keyframes progressBar {
        from {
            transform: scaleX(1);
        }

        to {
            transform: scaleX(0);
        }
    }

    /* Animation for sliding out */
    .toast-notification.hide {
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
    }
</style>

<script>
    function showToast(message, type = 'info', duration = 5000) {
        const container = document.getElementById('toastContainer');

        // Create toast element
        const toast = document.createElement('div');
        toast.className = `toast-notification ${type}`;

        // Determine icon based on type
        let icon = '';
        switch(type) {
            case 'success':
                icon = '✓';
                break;
            case 'error':
                icon = '✕';
                break;
            case 'info':
                icon = 'ℹ';
                break;
            default:
                icon = 'ℹ';
        }

        toast.innerHTML = `
            <span class="toast-icon">${icon}</span>
            <span class="toast-message">${message}</span>
            <button class="toast-close" onclick="removeToast(this)">&times;</button>
            <div class="toast-progress"></div>
        `;

        container.appendChild(toast);

        // Trigger animation
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);

        // Auto remove after duration
        setTimeout(() => {
            removeToast(toast.querySelector('.toast-close'));
        }, duration);
    }

    function removeToast(closeButton) {
        const toast = closeButton.parentElement;
        toast.classList.add('hide');

        setTimeout(() => {
            if (toast.parentElement) {
                toast.parentElement.removeChild(toast);
            }
        }, 300);
    }

    // Show toasts for TempData messages when page loads
    document.addEventListener('DOMContentLoaded', function() {
        @if (TempData["SuccessMessage"] != null)
        {
                <text>
                showToast('@Html.Raw(Html.Encode(TempData["SuccessMessage"].ToString()).Replace("'", "\\'"))', 'success', 5000);
                </text>
        }

        @if (TempData["ErrorMessage"] != null)
        {
                <text>
                showToast('@Html.Raw(Html.Encode(TempData["ErrorMessage"].ToString()).Replace("'", "\\'"))', 'error', 5000);
                </text>
        }

        @if (TempData["InfoMessage"] != null)
        {
                <text>
                showToast('@Html.Raw(Html.Encode(TempData["InfoMessage"].ToString()).Replace("'", "\\'"))', 'info', 5000);
                </text>
        }
    });
</script>